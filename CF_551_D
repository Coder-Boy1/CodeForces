#include <bits/stdc++.h>

using namespace std;

#define int long long
#define ll long long
#define SZ 3

long double PI =3.1415926535897;

int a[100005]={0},n;
long long MOD = 102;


int add(int a, int b) {
  int res = a + b;
  if (res >= MOD)
    return res - MOD;
  return res;
}

int mult(int a, int b) {
  long long res = a;
  res *= b;
  if (res >= MOD)
    return res % MOD;
  return res;
}

struct matrix {
  int arr[SZ][SZ];

  void reset() { memset(arr, 0, sizeof(arr)); }

  void makeiden() {
    reset();
    for (int i = 0; i < SZ; i++) {
      arr[i][i] = 1;
    }
  }

  matrix operator+(const matrix &o) const {
    matrix res;
    for (int i = 0; i < SZ; i++) {
      for (int j = 0; j < SZ; j++) {
        res.arr[i][j] = add(arr[i][j], o.arr[i][j]);
      }
    }
    return res;
  }

  matrix operator*(const matrix &o) const {
    matrix res;
    for (int i = 0; i < SZ; i++) {
      for (int j = 0; j < SZ; j++) {
        res.arr[i][j] = 0;
        for (int k = 0; k < SZ; k++) {
          res.arr[i][j] = add(res.arr[i][j], mult(arr[i][k], o.arr[k][j]));
        }
      }
    }
    return res;
  }
};

matrix power(matrix a, int b) {
  matrix res;
  res.makeiden();
  while (b) {
    if (b & 1) {
      res = res * a;
    }
    a = a * a;
    b >>= 1;
  }
  return res;
}

int power1(int a, int b, int m) {
  int ans = 1;
  while (b) {
    if (b & 1)
      ans = (ans * a) % m;
    b /= 2;
    a = (a * a) % m;
  }
  return ans;
}

int32_t main()
{
        matrix m;
        m.arr[0][0]=1; m.arr[0][1]=1; m.arr[0][2]=2;
        m.arr[1][0]=1; m.arr[1][1]=0; m.arr[1][2]=0;
        m.arr[2][0]=0; m.arr[2][1]=0; m.arr[2][2]=2;

        int n,k,l,mod;
        cin>>n>>k>>l>>mod;

        int count=0,count1=0,temp=k;
        while(temp)
        {
                if(temp%2)
                        count++;
                count1++;
                temp/=2;
        }

        if(count1>l)
        {
                cout<<0<<endl;
                return 0;
        }

        int ones=count;
        int zeros=l-count;


        MOD=mod;

        m = power(m,n-2);

        int P=m.arr[0][0]*1 + m.arr[0][1]*0 + m.arr[0][2]*1;
        P%=mod;

        int Q=((power1(2,n,mod)-P)%mod + mod) %mod;
        int ans=power1(P,ones,mod)*power1(Q,zeros,mod);
        ans%=mod;
        cout<<ans<<endl;

        return 0;
}
