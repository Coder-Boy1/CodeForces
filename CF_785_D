#include <bits/stdc++.h>
 
using namespace std;
 
#define ll long long
#define int long long
 
#define N 200005


const int MXN = 2 * 1e5 + 5;
const int MOD = 1e9 + 7;
ll fact[MXN];

void init() {
        fact[0] = 1;
        for (int i=1; i<MXN; i++) fact[i] = (i * fact[i - 1]) % MOD;
}

ll get_fact (ll val) {
        return fact[val];
}

ll inverseModp(ll a, ll p) {
    assert(p < (1ull << 63));
    assert(a < p);
    assert(a != 0);
    ll ex = p-2, result = 1;
    while (ex > 0) {
        if (ex % 2 == 1) {
            result = (result*a) % p;
        }
        a = (a*a) % p;
        ex /= 2;
    }
    return result;
}

ll nCrModp(ll n, ll r, ll p)
{
        ll res = 0;
        ll num = get_fact(n);
        ll den1 = get_fact(n-r);
        ll den2 = get_fact(r);
        return (num * inverseModp ((den1 * den2) % MOD, MOD)) % MOD;
}

int pref[N],suff[N];

int32_t main()
{
        init();
        string s;
        cin>>s;

        int n=s.length();

        for(int i=0;i<n;i++)
        {
                if(s[i]=='(')
                        pref[i]++;
                if(i>0)
                        pref[i]+=pref[i-1];
        }

        for(int i=n-1;i>=0;i--)
        {
                if(s[i]==')')
                        suff[i]++;
                if(i<n-1)
                        suff[i]+=suff[i+1];
        }
        int ans=0;
        for(int i=0;i<n;i++)
        {
                if(s[i]==')' || suff[i]==0)
                        continue;
                
                int cur=pref[i]+suff[i]-1;
                ans +=nCrModp(cur,pref[i], MOD);
                ans%=MOD;
        }
        cout<<ans<<endl;
        return 0;
}

